// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Servicios{
  serviciosId Int @id @default(autoincrement())
  nombreDelServicio String
  descripcionDelServicio String
  telefonoDeContacto String
  correoDeContacto String
  precioDelServicio Int
  nombreDelExperto String
  Solicitud Solicitudes [] @relation("ServicioConSolicitudes")
  Programa Programaciones[] @relation("ProgramacionConServicios")
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

model Solicitantes{
  solicitantesId Int @id @default(autoincrement())
  nombreDelSolicitante String
  telefonoDelSolicitante String
  correoDelSolicitante String
  claveDelSolicitante String
  Solicitud Solicitudes [] @relation("ServicioConSolicitantes")
  //Auditoria Auditorias[] @relation("AuditoriaConSolicitante")
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

model Solicitudes{
  solicitudesId Int @id @default(autoincrement())
  descripcionDeSolicitid String
  fechaSolicitud DateTime
  confirmacion String @default("Por Confirmar")
  IdDelservicio Int
  Servicio Servicios @relation("ServicioConSolicitudes", fields: [IdDelservicio], references: [serviciosId], onDelete: Cascade)
  IdDelsolicitante Int
  Solicitante Solicitantes @relation("ServicioConSolicitantes", fields: [IdDelsolicitante],references: [solicitantesId], onDelete: Cascade)
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

model Programaciones{
  programacionesId Int @id @default(autoincrement())
  fechaInicioDisponible DateTime
  fechaFinalDisponible DateTime
  IdDelServicio Int
  Servicio Servicios @relation("ProgramacionConServicios", fields: [IdDelServicio], references: [serviciosId], onDelete: Cascade)
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

model Usuarios{
  usuariosID Int @id @default(autoincrement())
  nombreDelUsuario String
  claveDelUsuario String
  rol Roles
  Token String? @db.VarChar(300)
  //Auditoria Auditorias[] @relation("AuditoriaConUsuario")
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

model Auditorias{
  auditoriaID Int @id @default(autoincrement())
  descripcionDeAccion String
  ///IdDelSolicitante  Int?
  //Solicitante Solicitantes? @relation("AuditoriaConSolicitante", fields: [IdDelSolicitante], references: [solicitantesId])
  //IdDelUsuario Int?
  //Usuario Usuarios? @relation("AuditoriaConUsuario", fields: [IdDelUsuario], references: [usuariosID])
  FechaDeCreacion DateTime @default(now())
  ActualizadoEn DateTime @default(now()) @updatedAt
}

enum Roles {
  Administrador
  Cliente
}